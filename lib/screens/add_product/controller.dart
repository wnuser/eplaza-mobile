import 'package:dio/dio.dart' as dio;
import 'package:e_plaza_vendor/data_provider/repository.dart';
import 'package:e_plaza_vendor/modals/delivery_time.dart';
import 'package:e_plaza_vendor/modals/product_details.dart';
import 'package:e_plaza_vendor/utils/const.dart';
import 'package:e_plaza_vendor/utils/preference.dart';
import 'package:flutter/cupertino.dart';
import 'package:get/get.dart';

import '../../dialogs/image_pick_option_dialog.dart';
import '../../modals/sub_category.dart' as sub;
import '../../utils/helper.dart';
import '../../utils/toasty.dart';

class Controller extends GetxController {
  RxString status = Status.PROGRESS.obs;

  Controller();

  final TextEditingController categoryController = TextEditingController();
  final TextEditingController titleController = TextEditingController();
  final TextEditingController offerPriceController = TextEditingController();
  final TextEditingController descriptionController = TextEditingController();
  final TextEditingController stockController = TextEditingController();
  final TextEditingController discountPriceController = TextEditingController();
  final TextEditingController shippingPolicyController = TextEditingController();

  final ScrollController scrollController = ScrollController();

  GlobalKey<FormState> formKey = GlobalKey<FormState>();
  final RxList<dynamic> images = <dynamic>[null, null, null].obs;
  final RxList<bool> imageErrors = <bool>[false, false, false].obs;
  RxList<sub.SubCategory> categories = <sub.SubCategory>[].obs;
  RxList<DeliveryTime> deliveryTimes = <DeliveryTime>[].obs;
  final RxBool cancellationPolicy = false.obs;
  final RxBool exchange = false.obs;
  final RxBool return_ = false.obs;

  final Rx<AutovalidateMode> autovalidateMode = AutovalidateMode.disabled.obs;

  String selectedCategoryId = '';
  String selectedShippingPolicyId = '';

  final RxDouble calculatedPercentage = 0.0.obs;

  @override
  void onInit() {
    super.onInit();
    init();
  }

  void init() {
    // if (Helper.isDeveloper) {
    //   categoryController.text = '';
    //   titleController.text = 'Test Product';
    //   offerPriceController.text = '25000';
    //   descriptionController.text = 'Best Lorem Ipsum Generator now on Android platform!'
    //       'You have full control on how many words, sentences and paragraphs should be generated by application.';
    //   stockController.text = '40';
    //   discountPriceController.text = '2500';
    //   shippingPolicyController.text = 'Testing...';
    // }

    getSubCategories();
    getDeliveryTimes();
  }

  void getSubCategories() async {
    var data = await Repository.instance.getSubCategories('1');
    categories.clear();
    if (data.isNotEmpty) {
      data.forEach((element) => categories.add(sub.SubCategory.fromJson(element)));
    }
    categories.refresh();
    status.value = Status.NORMAL;
  }

  void getDeliveryTimes() async {
    var data = await Repository.instance.getDeliveryTimes();
    deliveryTimes.clear();
    if (data.isNotEmpty) {
      data.forEach((element) => deliveryTimes.add(DeliveryTime.fromJson(element)));
    }
  }

  void onPriceChange(String str) {
    double offerPrice = offerPriceController.text.toDouble;
    double discountedPrice = discountPriceController.text.toDouble;

    var p = ((offerPrice - discountedPrice) * 100) / offerPrice;

    if (p > 0 && p < 100) {
      calculatedPercentage.value = p;
    }
  }

  Future pickShopImage() async {
    ImagePickOptionDialog(
      onSelected: (source) {
        Get.back();
        Helper.pickImage((file) {
          for (int i = 0; i < images.length; i++) {
            if (images[i] == null) {
              imageErrors[i] = false;
              images[i] = file;
              break;
            }
          }
          // images.add(file);
          images.refresh();
        }, (error) {
          Toasty.failed(error);
        }, source: source);
      },
    );
  }

  void addProduct() async {
    for (int i = 0; i < images.length; i++) {
      if (images[i] == null) {
        imageErrors[i] = true;
      }
    }

    if (formKey.currentState!.validate()) {
      if (images.isEmpty) {
        Toasty.failed('Please select product image!');
        return;
      }

      if (images.length < 3) {
        Toasty.failed('Please select 3 images of product!');
        return;
      }

      for (int i = 0; i < images.length; i++) {
        if (images[i] == null) {
          imageErrors[i] = true;
          Toasty.failed('Please select all images');
          return;
        }
      }

      status.value = Status.PROGRESS;

      dio.MultipartFile? image1 =
          images.length > 0 ? await dio.MultipartFile.fromFile(images[0].path) : null;

      dio.MultipartFile? image2 =
          images.length > 1 ? await dio.MultipartFile.fromFile(images[1].path) : null;

      dio.MultipartFile? image3 =
          images.length > 2 ? await dio.MultipartFile.fromFile(images[2].path) : null;

      var result = await Repository.instance.addProduct(
        category_id: selectedCategoryId,
        sub_category_id: selectedCategoryId,
        vendor_id: Preference.user.id.nullSafe,
        name: titleController.text,
        price: offerPriceController.text,
        offer_price: offerPriceController.text,
        stock_quantity: stockController.text,
        description: descriptionController.text,
        shipping_policy: selectedShippingPolicyId,
        refund_policy: '',
        is_cancel_enabled: cancellationPolicy.value ? '1' : '0',
        is_return_enabled: return_.value ? '1' : '0',
        is_exchange_enabled: exchange.value ? '1' : '0',
        image_1: image1,
        image_2: image2,
        image_3: image3,
      );

      if (result['success']) {
        Toasty.success(result['message']);
        Get.back(result: true);
      } else {
        Toasty.failed(result['message']);
      }
      status.value = Status.NORMAL;
    }
  }

  void getProductDetails(num? id) async {
    if (id != null) {
      dynamic response = await Repository.instance.getProductDetails(id);

      if (response['success']) {
        ProductDetails product = ProductDetails.fromJson(response['data'][0]);

        selectedCategoryId = product.subCategoryId.toString();
        categoryController.text = product.subCategory.name.toString();
        titleController.text = product.name.nullSafe;
        offerPriceController.text = product.offerPrice.toString();
        descriptionController.text = product.description.nullSafe;
        stockController.text = product.stockQuantity.toString();
        discountPriceController.text = product.price.toString();
        shippingPolicyController.text = product.globalDeliveryTime.txt;

        cancellationPolicy.value = product.isCancelEnabled == 1;
        exchange.value = product.isExchangeEnabled == 1;
        return_.value = product.isReturnEnabled == 1;

        onPriceChange(product.offerPrice.toString());

        if (product.image1.notEmpty) {
          images[0] = product.image1;
        }
        if (product.image2.notEmpty) {
          images[1] = product.image2;
        }
        if (product.image3.notEmpty) {
          images[2] = product.image3;
        }
      }
    }
  }
}
